import { Repository } from 'typeorm';
import { BaseService } from '../../../common/base/base.service';
import { Collection } from '../entities/collection.entity';
import { Link } from '../../links/entities/link.entity';
import { User } from '../../users/entities/user.entity';
import { CreateCollectionDto, UpdateCollectionDto, AddLinksToCollectionDto, RemoveLinksFromCollectionDto, ReorderLinksInCollectionDto, CollectionLayoutDto, CollectionStyleDto, CollectionSettingsDto } from '../dto/collection.dto';
export declare class CollectionService extends BaseService<Collection> {
    private readonly collectionRepository;
    private readonly linkRepository;
    private readonly userRepository;
    constructor(collectionRepository: Repository<Collection>, linkRepository: Repository<Link>, userRepository: Repository<User>);
    protected getEntityName(): string;
    createCollection(userId: string, createCollectionDto: CreateCollectionDto): Promise<Collection>;
    getUserCollections(userId: string, includeInactive?: boolean): Promise<Collection[]>;
    getCollectionById(userId: string, collectionId: string): Promise<Collection>;
    updateCollection(userId: string, collectionId: string, updateDto: UpdateCollectionDto): Promise<Collection>;
    deleteCollection(userId: string, collectionId: string): Promise<void>;
    reorderCollections(userId: string, collectionIds: string[]): Promise<Collection[]>;
    addLinksToCollection(userId: string, collectionId: string, addLinksDto: AddLinksToCollectionDto): Promise<Collection>;
    removeLinksFromCollection(userId: string, collectionId: string, removeLinksDto: RemoveLinksFromCollectionDto): Promise<Collection>;
    reorderLinksInCollection(userId: string, collectionId: string, reorderDto: ReorderLinksInCollectionDto): Promise<Collection>;
    updateCollectionLayout(userId: string, collectionId: string, layoutDto: CollectionLayoutDto): Promise<Collection>;
    updateCollectionStyle(userId: string, collectionId: string, styleDto: CollectionStyleDto): Promise<Collection>;
    updateCollectionSettings(userId: string, collectionId: string, settingsDto: CollectionSettingsDto): Promise<Collection>;
    archiveCollection(userId: string, collectionId: string): Promise<Collection>;
    restoreCollection(userId: string, collectionId: string): Promise<Collection>;
    getArchivedCollections(userId: string): Promise<Collection[]>;
    getCollectionAnalytics(userId: string, collectionId?: string): Promise<any>;
    private reorderCollectionsAfterDeletion;
}
