import { Repository } from 'typeorm';
import { BaseService } from '../../../common/base/base.service';
import { User, UserCategory, UserGoal } from '../entities/user.entity';
import { EmailVerification } from '../entities/email-verification.entity';
import { EmailVerificationService } from './email-verification.service';
import { EmailService } from '../../../shared/services/email.service';
import { Link } from '../../links/entities/link.entity';
import { SocialLink } from '../../links/entities/social-link.entity';
import { Collection } from '../../collections/entities/collection.entity';
import { CreateUserDto, UpdatePersonalInfoDto, UpdateProfileDto, CompleteOnboardingDto } from '../dto/create-user.dto';
export declare class UserService extends BaseService<User> {
    private readonly userRepository;
    private readonly emailVerificationRepository;
    private readonly linkRepository;
    private readonly socialLinkRepository;
    private readonly collectionRepository;
    private readonly emailService;
    private readonly emailVerificationService;
    constructor(userRepository: Repository<User>, emailVerificationRepository: Repository<EmailVerification>, linkRepository: Repository<Link>, socialLinkRepository: Repository<SocialLink>, collectionRepository: Repository<Collection>, emailService: EmailService, emailVerificationService: EmailVerificationService);
    protected getEntityName(): string;
    register(createUserDto: CreateUserDto): Promise<Omit<User, "password">>;
    updatePersonalInfo(userId: string, personalInfo: UpdatePersonalInfoDto): Promise<Omit<User, "password">>;
    updateUsername(userId: string, username: string): Promise<Omit<User, "password">>;
    updateGoal(userId: string, goal: UserGoal): Promise<Omit<User, "password">>;
    updateProfile(userId: string, profileData: UpdateProfileDto): Promise<Omit<User, "password">>;
    completeOnboarding(userId: string, finalData: CompleteOnboardingDto): Promise<Omit<User, "password">>;
    getOnboardingStatus(userId: string): Promise<{
        user: Omit<User, "password">;
        onboardingStep: number;
        hasCompletedOnboarding: boolean;
        isEmailVerified: boolean;
        nextSteps: string[];
    }>;
    checkUsernameAvailability(username: string): Promise<{
        available: boolean;
        username: string;
        message: string;
    }>;
    getCategories(): {
        value: UserCategory;
        label: string;
    }[];
    getGoals(): {
        value: UserGoal;
        label: string;
        description: string;
    }[];
    private createEmailVerification;
    private calculateOnboardingStep;
    private getNextSteps;
    setupPassword(userId: string, password: string): Promise<User>;
    updatePassword(userId: string, currentPassword: string, newPassword: string): Promise<User>;
    verifyEmailAndSetupPassword(token: string, password: string): Promise<User>;
    private hashPassword;
    getPublicProfile(username: string): Promise<{
        message: string;
        user: null;
        links: never[];
        socialLinks: never[];
        collections: never[];
        exists: boolean;
    } | {
        message: string;
        user: {
            category: string | null;
            goal: string | null;
            email: string;
            username: string;
            password: string;
            firstName: string;
            lastName: string;
            profileTitle: string;
            bio: string;
            profileImageUrl: string;
            profileImageGradient: string;
            hasCompletedOnboarding: boolean;
            onboardingStep: number;
            isEmailVerified: boolean;
            emailVerifiedAt: Date;
            links: any[];
            socialLinks: any[];
            collections: any[];
            forms: any[];
            stores: any[];
            events: any[];
            eventGuests: any[];
            eventHosts: any[];
            eventVendors: any[];
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
        links: Link[];
        socialLinks: SocialLink[];
        collections: Collection[];
        exists: boolean;
    }>;
    private formatCategoryLabel;
    private formatGoalLabel;
}
