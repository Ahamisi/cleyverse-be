import { Repository } from 'typeorm';
import { BaseService } from '../../../common/base/base.service';
import { Form } from '../entities/form.entity';
import { FormField } from '../entities/form-field.entity';
import { FormSubmission } from '../entities/form-submission.entity';
import { User } from '../../users/entities/user.entity';
import { CreateFormDto, UpdateFormDto, UpdateFormStatusDto, SubmitFormDto, AddFormFieldDto, UpdateFormFieldDto, ReorderFormFieldsDto } from '../dto/form.dto';
export declare class FormService extends BaseService<Form> {
    private readonly formRepository;
    private readonly formFieldRepository;
    private readonly formSubmissionRepository;
    private readonly userRepository;
    constructor(formRepository: Repository<Form>, formFieldRepository: Repository<FormField>, formSubmissionRepository: Repository<FormSubmission>, userRepository: Repository<User>);
    protected getEntityName(): string;
    createForm(userId: string, createFormDto: CreateFormDto): Promise<Form>;
    getUserForms(userId: string, includeInactive?: boolean): Promise<Form[]>;
    getFormById(userId: string, formId: string): Promise<Form>;
    getPublicForm(formId: string): Promise<Form>;
    updateForm(userId: string, formId: string, updateFormDto: UpdateFormDto): Promise<Form>;
    deleteForm(userId: string, formId: string): Promise<void>;
    updateFormStatus(userId: string, formId: string, updateStatusDto: UpdateFormStatusDto): Promise<Form>;
    addFormField(userId: string, formId: string, addFieldDto: AddFormFieldDto): Promise<FormField>;
    updateFormField(userId: string, formId: string, fieldId: string, updateFieldDto: UpdateFormFieldDto): Promise<FormField>;
    deleteFormField(userId: string, formId: string, fieldId: string): Promise<void>;
    reorderFormFields(userId: string, formId: string, reorderDto: ReorderFormFieldsDto): Promise<Form>;
    submitForm(formId: string, submitDto: SubmitFormDto, metadata?: any): Promise<FormSubmission>;
    getFormSubmissions(userId: string, formId: string): Promise<FormSubmission[]>;
    getFormAnalytics(userId: string, formId?: string): Promise<any>;
    private createDefaultFields;
    linkToEvent(userId: string, formId: string, eventId: string, formPurpose: 'registration' | 'vendor' | 'guest', eventTitle?: string, eventSlug?: string): Promise<Form>;
    unlinkFromEvent(userId: string, formId: string): Promise<Form>;
    getEventLinkedForms(eventId: string): Promise<Form[]>;
    getFormsByPurpose(userId: string, formPurpose: 'registration' | 'vendor' | 'guest'): Promise<Form[]>;
}
